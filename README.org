#+TITLE: Utilisation de plateforme industrielle pour le calcul intensif
#+AUTHOR: Yves Coudière
#+DATE: lundi  7 septembre 2020
#+EMAIL: yves.coudiere at u-bordeaux.fr [05 24 57 40 36]
#+LANGUAGE: fr

#+OPTIONS: H:5
#+OPTIONS: toc:2

* Organisation pratique, évaluation
** Les objectifs principaux
- Utiliser un langage de haut niveau pour le calcul scientifique, dans
  notre cas Python avec les modules Numpy, Scipy, Matplotlib, etc.
- Se documenter pour concevoir une solution à un problème
  d'approximation des EDP, par la pratique.
- Mener un projet sur plusieurs mois.
** La méthode pour y arriver
Travailler en groupe collaboratifs, en présentiel et à distance:
apprentissage par projets et séances de mise en commun.

Chaque groupe de 2 à 4 étudiants a en charge la réalisation d'un
projet. Le projet est réalisé pendant les heures de TP et librement en
dehors. Chaque projet donne lieu à
- un compte rendu hebdomadaire d'avancement;
- un temps d'échange après quelques séances;
- la réalisation d'un compte-rendu terminal;
- un exposé devant l'ensemble des étudiants.
** Évaluation
- Session 1 : 0.7*rapport + 0.3*contrôle continu (présentation + cr
  hebdomadaires + 1 CR de TP individuel)
- Session 2 : 0.7*2e version du rapport + 0.3*max(contrôle continu de
  session 1, note rapport session 2), ie règle du max

La note de contrôle continu évalue
 1. La compétence d'utilisation d'un dépôt git hébergé sur github.com,
    et la capacité à concevoir une solution logiciel à un problème
    numérique reposant sur les connaissances de licence: évaluation du
    travail et du CR du tp individuel, évalué à travers l'état et
    l'historique du dépôt git de chacun (pas de dépôt = 0)
 2. la capacité d'organisation du travail demandé sur l'ensemble des
    semaines, la régularité du travail hebdomadaire, vue à travers les
    CR remplis chaque semaine et présents dans le dépôt git

La note de rapport évalue l'avancement de travail tel qu'il est décrit
dans le rapport, mais surtout la qualité de l'utilisation des outils et
méthodes de suivi de projet en groupe.
** Emploi du temps 8h de CM + 16h de TDM
Ce qui est réservé pour l'instant: les mardi matin toutes les
semaines. Ce qui est du: 8h de CM et 16h de TDM, qui seront organisés
comme dans le tableau
|----+------+------------------+-------------------------------------------------------------|
| CM | TDM  |                  |                                                             |
|----+------+------------------+-------------------------------------------------------------|
| 2h |      | mardi 08/09/2020 | Prise en main de git et github, python                      |
|    | 2h40 | mardi 15/09/2020 | TP individuel                                               |
|    | 2h40 | mardi 22/09/2020 | Début travail en groupes, prise en main Numpy et Matplotlib |
|    | 2h40 | mardi 29/09/2020 |                                                             |
|    |      | mardi 06/10/2020 |                                                             |
|    |      | mardi 13/10/2020 |                                                             |
| 3h |      | mardi 20/10/2020 | Complément latex ou python, cr intermédiaire                |
|    |      | mardi 27/10/2020 | Vacances                                                    |
|    | 2h40 | mardi 03/11/2020 |                                                             |
|    | 2h40 | mardi 10/11/2020 |                                                             |
|    | 2h40 | mardi 17/11/2020 |                                                             |
|    |      | mardi 24/11/2020 |                                                             |
|    |      | mardi 01/12/2020 |                                                             |
| 3h |      | mardi 08/12/2020 | Présentation finale des projets                             |
|----+------+------------------+-------------------------------------------------------------|
| 8h | 16h  |                  |                                                             |
|----+------+------------------+-------------------------------------------------------------|
** Codes UE et groupes
- Code UE :: 4TMS702U
- Codes groupes :: 
    + M1 Equations aux dérivées partielles - Modélisation (4TMQM4 -
      900), 
    + M1 Analyse, équations aux dérivées partielles, probabilité
      (4TMAQ4 - 902)
    + M1 Analyse, équations aux dérivées partielles, probabilité
      (4TMAQ4 - 901)
- Email du groupe :: ue-4tms702u@diffetu.u-bordeaux.fr
** Tentative de déroulement
 1. CM1: intro, cadre du cours, exemples, planning, dates importantes,
    travail à fournir, échanges. Bref cours sur git, python, markdown à
    partir d'un exemple de code et de compte-rendu en latex, qui
    deviendra le TP1 à terminer à la prochaine séance. Prise en main git
    et github.com, manipulation git et markdown.

 2. TP1, individuel: gestion individuelle d'un projet avec
    git. Rédaction d'un compte-rendu en Markdown. Prise en main de
    python: faire réaliser un petit code à chacun.

 3. TP2,3: Premier travail de programmation sur une situation
    simplifiée du projet. Reflexion sur les difficultés supplémentaires
    pour le cas 'final', quelles sont les questions auxquelles répondre
    ? Où trouver les réponses ?  Comment organiser le travail à venir ?
    Rédaction d'un rapport préliminaire en latex si possible.
   
 4. CM2: compléments théorique python à base d'exemples, introduction à
    latex avec des exemples. Présentations eclairs des projets (chaque
    groupe synthétise son rapport, ses questions, son cheminement,
    lecture de code).

 5. TP4,5: travail de programmation sur le projet, et mise au point, via
    les resources disponibles, et par échange avec l'enseignant.

 6. TP6: finalisation du projet, rédaction en commun du squelette du
    rapport, mise en place des éléments les plus importants, notamment
    les résultats disponibles. Répartition du travail de rédaction et de
    mise en forme. Rédaction du plan de l'exposé, nombre de diapos,
    contenu et rôle de chaque diapo.

 7. CM2: exposé par groupe, remise des rapports finaux.
* Outils et resources
Plus d'informations dans le premier TP, et plus d'informations disponible au fur
et à mesure de l'avancement du cours.
** Git résumé très rapide et succin d'informations utiles
- L'outil Git, par l'intermédiaire de la plateforme, http://github.com
- https://openclassrooms.com/courses/gerez-vos-codes-source-avec-git
- http://yannesposito.com/Scratch/fr/blog/2009-11-12-Git-for-n00b/
- https://www.miximum.fr/blog/enfin-comprendre-git/

L'arborescence est stockée 3 fois: working, staging, repository.

Pourquoi: pour mieux gérer les commit atomiques.

/Processus de dévelopment:/
 1. je développe en modifiant / déplaçant / supprimant des fichiers;
 2. quand une série de modification est cohérente et digne d'être
    commitée, je la place dans la zone de staging;
 3. je vérifie que l'état de ma zone de staging est satisfaisant;
 4. je committe;
 5. et on répète jusqu'à… euh… ben, la fin quoi.

/Entre les espaces de stockage:/
 - Copie working -> staging: ~git add~
 - staging -> dépôt: ~git commit~
 - dépôt -> staging: ~git reset~
 - staging -> working (efface modifs en cours): ~git checkout~
 - diff entre working et staging: ~git diff~
 - diff entre staging et dernier comit: ~git diff --cached~

/Branches:/ On utilise les branches tout le temps, ou presque. Pour
tester une fonctionnalité; pour isoler un développement un peu long;
pour mettre quelques commits de côté; pour développer sans péter la
branche principale; pour corriger un bug sans impacter le développement
d'une fonctionnalité parallèle. Bref, il y a pleins de raisons
d'utiliser les branches !

/Commandes sur les branches:/
 - créer, lister, supprimer: ~git branch~
 - déplacer la référence HEAD vers une nouvelle branche: ~git checkout~
 - fusion: on se place sur la branche qui reçoit le merge fusion
   elle-même: ~git merge <l'autre branche>~
 - supprimer la branche: ~git branch -d <test>~ 
 - résolution des conflits: voir ~git help merge~
** Latex, Markdown
- Le langage Markdown, pour l'écriture de compte-rendus hebdomadaires,
  https://daringfireball.net/projects/markdown
- Le langage Latex, https://www.latex-project.org.
   + [[file:template.tex][template.tex]] : exemple de fichier Latex qui permet de contruire un
     document en français. Le fichier doit être enregistré avec
     l'encodage UTF8. Il inclus une bibliographie (bibtex) et une image
     (pdf).
   + [[file:refs.bib][refs.bib]] : fichier des references bibliographies.
   + [[file:V_tnnp.pdf][V_tnnp.pdf]] : image incluse dans le .tex.
** Python
- Le langage Python (et les modules cités plus haut), https://www.python.org
- Les modules dédiés au calcul scientifique,
  https://www.scipy.org/about.html, licences libres variées.
- Il existe de nombreuses autres resources pour python.
** EDP et calcul scientifique
Vous avez accès à la bibliothèque de math et info (bâtiment A33).
*** Livres à la BMI
- Sainsaulieu, Lionel. Calcul scientifique. Cours et exercices corrigés
  pour le 2ème cycle et les écoles d'ingénieurs. Deuxième édition. -
  Dunod, 2000.
- Filbet, Francis. Analyse numérique : algorithme et étude
  mathématique. 2e édition. - Dunod, 2013. - ( Sciences Sup ).
- Quarteroni, Alfio & Sacco, Riccardo & Saleri, Fausto. Méthodes
  numériques - algorithmes, analyse et applications. - Springer
  Verlag, 2007.
- Quarteroni, Alfio. Numerical models for differential problems. -
  Springer Verlag, 2009. - ( Modeling, Simulation & Applications ; 2).
- Quarteroni, Alfio & Valli, Alberto. Numerical approximation of partial
  differential equations. - Springer Verlag, 1994. - ( Springer Series
  in Computational Mathematics ; 23).
- Tveito, Aslak & Winther, Ragnar. Introduction to partial differential
  equations. A computational approach. - Springer Verlag, 1998. - (
  Texts in applied mathematics ; 29).
- Dautray, Robert & Lions, Jacques-Louis. Analyse mathématique et calcul
  numérique pour les sciences et les techniques ; Volumes 1 à 9 -
  Masson, 1987-1988. - (Collection Enseignement).
*** Autres livres
- Elements of Scientific Computing. Authors: Tveito, A., Langtangen,
  H.P., Nielsen, B.F., Cai, X. Springer 2010.
- Fundamentals of Scientific Computing. Authors: Gustafsson,
  Bertil. Springer 2011.
*** Lien web
* Quelques mots sur le calcul scientifique (dans ce cours)
** Introduction
L'objectif est de découvrir quelques environnements de travail qui
facilitent le développement de solutions basée sur le calcul
scientifique (et l'utilisation de plateformes de calcul haute
performance). Le cours vise *la simulation numérique de modèles* issus
de la physique, de la biologie, etc, et *basés sur des équations aux
dérivées partielles*.

En sciences, le calcul scientifique est un outil à part entière de
résolution de problèmes et de conception de solutions techniques. Il
existe désormais plusieurs outils matures qui facilitent et accélèrent
le développement de ces solutions techniques. La maîtrise de ces outils
et du calcul scientifique est un atout important dans la recherche
d'emploi.

Quelques questions importantes à propos du calcul scientifique:
- Quelles plateformes matérielles, quels outils informatiques, quelles
  méthodes mathématiques ?
- Comment assurer la reproductibilité des résultats ? Quelles sont les
  bonnes pratiques de programmation pour cela (gestion de versions --
  git, svn... --, tests, documentation...) ?
** Des problèmes spécifiques
Des problèmes d'ingénierie ou de recherche qui demande la résolution de
problèmes numériques de très grandes tailles ou qui sont très nombreux.

Exemple de la prévision de la météo, de gestion de files d'attente
complexes (réseaux chemin de fer, réseaux avions...), du traitement
d'image (imagerie médicale, animation...)

L'ordinateur fait des + et *, et répartit le travail, communique des
nombres. Le coeur des algorithmes repose sur la gestion (construction,
manipulation, opérations...) des grands tableaux de nombres. Et donc
d'un point de vue mathématique sur l'algèbre linéaire pour des grandes
matrices. Grand = plusieurs millions, voir des milliards. Exemple: un
cube 100*100*100 = 1 million.

À partir de ces opérations matricielles, nous allons construire des
algorithmes qui permettent de calculer des solutions approchées
d'équations aux dérivées partielles.
** Matériel
- Ordinateurs portable :: faibles performances mais très répandus, en
     général multicoeur à mémoire partagée.
- Stations de travail fixes :: meilleures performances, multicoeur ou
     multiprocesseur à mémoire partagé.
- Serveurs de calcul :: performances importantes à très importantes,
     nombreuses architectures possibles, mais modèles hiérarchique et
     complexes difficiles à programmer. Cf cours de calcul parallèle du
     semestre de printemps.
** Outils informatiques
- bibliothèques :: qui permettent d'accéder aux fonctionnalités du
                   matériels, comme MPI et autres techniques de
                   communication ou gestion de la mémoire et de
                   l'exécution (openMP), mais aussi les bibliothèques de
                   calcul matriciel (BLAS, LAPACK, UMFPACK, HIPS,
                   MUMPS...).
- langages de programmation :: Fortran, C, C++, proches de la machine,
     utilisent directement les bibliothèques.
- langages de haut niveaux :: sans compilation, avec interface simplifié
     et intuitive avec les bibliothèques, temps de développement
     raccourci, maintien plus simple, interface intuitive avec les
     bibliothèques...
** Mathématiques
- Les problèmes sont souvent du domaine des EDP (qqsoit le champ d'application).
- Analyse fonctionnelle et EDP.
- Transformée de Fourier.
- Méthodes numériques.
- Résolution des grands systèmes linéaires, valeurs propres.
- Résolution d'équations différentielles.
- Interpolation, approximation, intégration numérique.
** Objectif principal
Mettre en oeuvre *sans se casser la tête* les méthodes ci-dessus pour résoudre
des problèmes numériquement complexe sur des ordinateurs dédiés au calcul,
éventuellement en utilisant les resources de manière optimale.

Ça demande l'utilisation d'outils informatique et numériques spécifiques.
** Liens
Liste de quelques liens.

- matlab :: http://fr.mathworks.com/
- scilab :: http://www.scilab.org/fr
- octave :: https://www.gnu.org/software/octave/
- freefem++ :: http://www.freefem.org/
- python :: https://www.python.org/, langage de programation généraliste
            simple et de haut niveau.
- scipy scientific computing stack ::
     https://www.scipy.org/about.html, bibliothèque de calcul
     scientifique pour Python
- julia :: https://julialang.org/, nouveau langage dédié au calcul
           scientifique.

* Python et les modules scientifiques
** Introduction
- Python :: langage de haut niveau, simple et élégant. Python est plus qu'un
     langage de programmation. C'est l'environnement de travail qui permet
     l'exécution du code.
- Détails techniques :: typage dynamique, gestion automatique de la mémoire,
     interpreté.
- Avantages :: programmation facile, développement rapide, modularité et autres
     bonnes pratiques, beaucoup de bibliothèques dans tous les domaines
- Inconvénients :: exécution décentralisée, lente, démarrage peut être difficile

Notons que ce document est rédigé en utilisant les version suivantes:
|------------+--------|
| python     |  3.7.8 |
| ipython    | 7.17.0 |
| numpy      | 1.19.0 |
| scipy      |  1.4.1 |
| matplotlib |  3.2.2 |
|------------+--------|

On trouve en ligne de nombreux tutoriels Python, généralistes ou spécialisés
dans certains domaines, par exemple le tutoriel officiel de python (pour la
version 3) est là: https://docs.python.org/fr/3/tutorial/index.html.
*** Interpéteur, fichiers, encodage
/Rappel:/ l'ordinateur est une machine à calculer sophistiquée. Ses éléments
clés sont une (ou plusieurs) unités de calcul, qui disposent de registres
locaux, et une hiérarchie de mémoire différemment organisée suivant les
machines. Les unités de calcul sont capables de réaliser de nombreuses
opérations élémentaires entre les valeurs enregistrées dans les registres
(notamment +,* et toutes les opérations mathématiques et logiques de base). Elle
sont connectées aux mémoires en partant des mémoires les plus proches, qui sont
les plus rapides d'accès mais aussi les plus petites (exple: mémoire cache), aux
plus lointaine qui sont aussi les plus grandes (disque dur). La mémoire vive se
trouve en général à un niveau intermédiaire.

Un programme est un ensemble d'instructions et de données qui sont stockés dans
la mémoire. Les unités de calcul exécutent les instructions en partantdes
données. Les instructions sont, a priori, celles qui sont connues des unités de
calcul, dont le langage est appelé assembleur. Mais en pratique, elle sont peu
lisibles par un être humain. Nous avons donc besoin d'un outil qui permette de
générer ces instructions à partir des programmes que nous allons écrire. Ces
programmes sont des suites d'instructions rédigées dans un langage
compréhensible, mais néanmoins codifié (dans le domaine du calcul scientifiqur,
C, C++, Fortran, python, julia...). Pour exécuter celui-ci, il existe
principalement deux méthodes.
1. Transformer ce texte en une suite d'instruction de l'unité de calcul, c'est
   ce qu'on appelle compiler un programme. Pour cela on utilise un logiciel
   appelé compilateur, qui génère du code machine (ou assembleur), puis on
   exécute celui-ci. Exemples: C, C++, Fortran.
2. Interpréter le programme instruction par instruction, en faisant le lien
   entre chaque instruction et du code machine standardisé. Les instructions
   sont interprétées puis exécutées une à une par un interpréteur de
   commande. Exemple: Python.
La technique 1. est plus complexe à mettre en oeuvre, mais donne des programmes
mieux optimisé et dont les temps d'exécutions sont en général beaucoup plus
rapides. La technique 2 est très flexible et d'utilisation simple. Elle peut
être assez rapide si l'on utilise des ensembles d'instruction compilées à
l'avance pour les tâches les plus complexes.

/Note:/ le nouveau langage Julia permet une approche intermédiaire, dite de
compilation /just in time/.
**** Interpéteur
L'interpréteur est un programme qui présente une interface dans laquelle on peut
taper et exécuter des instructions. Par exemple lorsque l'on ouvre un terminal
sous linux, celui-ci exécute un interpréteur de commande linux, en général
bash. Il présente une invitation de commande appelée prompt (souvent le signe
$). Celui-ci permet d'exécuter des commandes du système linux, comme ls, rm, cp,
cd, etc. Il permet en particulier d'exécuter les interpéteurs pythons
- python :: intepréteur par défaut, lit et exécute un code
            python. Alternativement propose un environnement d'interprétation
            rustique.
- ipython :: interpéteur beaucoup plus riche et commode à utiliser. Avec
             historique des commandes, complétion automatique, édition de code,
             extraction de documentation, interaction avec l'environnement, etc.
- jupyter notebook :: environnement de travail augmenté avec possibilité de
     prendre des notes et de montrer des résultats. Nécessite d'utiliser un
     serveur jupyter.
**** Fichier et encodage 
Le programme est enregistré dans un fichier, en général sur le disque est
enregistré en mémoire (disque dur en general) en transformant chacun des
caractères en code binaire. Le code historique est le code Ascii, mais le code
utilisé actuellement s'appelle utf-8. Il permet de coder, entre autre, tous les
caractères des langues européennes (avec leurs accents).
*** Introduction python
- variable: endroit de la mémoire utilisé pour stocker une quantité et repérée
  par un identifiant
- en python, il n'est pas nécessaire de spécifier le type de la vairable
  (entier, flottant, chaine de caractère...), cela se fait de manière
  automatique en fonction de l'instruction d'affection d'un valeur à la
  variable.
- le types de base de variable python sont: 
- on peut faire des poérations entre les variables ou sur une variable: +, -, *,
  //, %, or, and, not, etc.
- python peut faire des conversion automatiques entre types de données, en
  particulier numériques
- etc

*** Exemples python
Quelques exemples introductifs à python (très succins) sont disponibles
dans le répertoire [[file:exemples_python][exemples_python]]. Il est suggéré de les parcourir dans
l'ordre ci-dessous:
1. [[file:exemples_python/hello_world.py][hello_world.py]] : un premer script.
2. [[file:exemples_python/simple_data_types.py][simple_data_types.py]] : exemples de quelques types de variables python.
3. [[file:exemples_python/more_data_types.py][more_data_types.py]] : d'autres types de variables, plus riches.
4. [[file:exemples_python/operations.py][operations.py]] : les opérations, exemples avec conversions
   automatiques, etc.
5. [[file:exemples_python/control_flow.py][control_flow.py]] : tests et boucles.
6. [[file:exemples_python/functions_modules.py][functions_modules.py]] : comment définir des fonctions.
7. [[file:exemples_python/files_io.py][files_io.py]] : écriture et lecture de fichiers.
** Python pour le calcul scientifique
Communauté importante d'utilisateurs, écosystème étendu:
- numpy :: http://numpy.scipy.org -- gestion efficace des grands tableaux dans
     python.
- scipy :: http://www.scipy.org -- nombreux algorithmes de calculs scientifique,
     organisé en modules, comme algèbre linéaire, transformé de Fourier, etc.
- matplotlib :: http://www.matplotlib.org -- sorties graphiques.
- mpi4py :: http://pythonhosted.org/mpi4py -- bibliothèque de passage de
     messages entre process pour le calcul parallèle
- etc :: et plein d'autres

Bonnes performances grâce à l'integration des bibliothèques optimisées venant du
C ou du Fortran (blas, atlas blas, lapack, arpack, Intel MKL...).  Support assez
bon pour le calcul parralèle (threads, openmp, mpi, cuda, opencl)

- Schéma de principe :: Python <- Numpy <- {Scipy, Matplotlib, Autres boîtes à
     outils} <- Programme utilisateur

*Note:* Nous utiliserons python pour faire de la programmation
procédurale, et sans utiliser de notions de programmation orientée
objet.

*** Exemples numpy et scipy.sparse
Des exemples se trouvent dans le répertoire [[file:exemples_python][exemples_python]], organisés
comme décrit ci-dessous.
1. [[file:exemples_python/intro_numpy.ipynb][intro_numpy.ipynb]] : introduction à Numpy. Le code python est dans [[file:exemples_python/intro_numpy.py][intro_numpy.py]].
2. [[file:exemples_python/intro_matplotlib.py][intro_matplotlib.py]] : script d'introduction pour les graphiques avec
   matplotlib.
3. [[file:exemples_python/intro_sparse.ipynb][intro_sparse.ipynb]] : introduction à l'utilisation de matrices
   creuses, et résolution d'un équation de type Laplace. Le code python
   est dans [[file:exemples_python/intro_sparse.py][intro_sparse.py]].
** Disponibilité, installation
Python est disponible sous linux, windows et MacOS. Dans tous les cas, il faut
installer au minimum: python, ipython, numpy, scipy, matplotlib.
